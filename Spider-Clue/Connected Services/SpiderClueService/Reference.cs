//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spider_Clue.SpiderClueService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessAccount", Namespace="http://schemas.datacontract.org/2004/07/GameService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Spider_Clue.SpiderClueService.Gamer))]
    public partial class AccessAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamertagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsBannedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gamertag {
            get {
                return this.GamertagField;
            }
            set {
                if ((object.ReferenceEquals(this.GamertagField, value) != true)) {
                    this.GamertagField = value;
                    this.RaisePropertyChanged("Gamertag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsBanned {
            get {
                return this.IsBannedField;
            }
            set {
                if ((this.IsBannedField.Equals(value) != true)) {
                    this.IsBannedField = value;
                    this.RaisePropertyChanged("IsBanned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Gamer", Namespace="http://schemas.datacontract.org/2004/07/GameService")]
    [System.SerializableAttribute()]
    public partial class Gamer : Spider_Clue.SpiderClueService.AccessAccount {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpiderClueService.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUserTransaction", ReplyAction="http://tempuri.org/IUserManager/AddUserTransactionResponse")]
        int AddUserTransaction(Spider_Clue.SpiderClueService.Gamer gamer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUserTransaction", ReplyAction="http://tempuri.org/IUserManager/AddUserTransactionResponse")]
        System.Threading.Tasks.Task<int> AddUserTransactionAsync(Spider_Clue.SpiderClueService.Gamer gamer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsAccountExisting", ReplyAction="http://tempuri.org/IUserManager/IsAccountExistingResponse")]
        bool IsAccountExisting(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsAccountExisting", ReplyAction="http://tempuri.org/IUserManager/IsAccountExistingResponse")]
        System.Threading.Tasks.Task<bool> IsAccountExistingAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateAccount", ReplyAction="http://tempuri.org/IUserManager/AuthenticateAccountResponse")]
        bool AuthenticateAccount(string gamertag, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateAccount", ReplyAction="http://tempuri.org/IUserManager/AuthenticateAccountResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateAccountAsync(string gamertag, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/RequestGuessPlayer", ReplyAction="http://tempuri.org/IUserManager/RequestGuessPlayerResponse")]
        string RequestGuessPlayer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/RequestGuessPlayer", ReplyAction="http://tempuri.org/IUserManager/RequestGuessPlayerResponse")]
        System.Threading.Tasks.Task<string> RequestGuessPlayerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateGamertag", ReplyAction="http://tempuri.org/IUserManager/AuthenticateGamertagResponse")]
        int AuthenticateGamertag(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateGamertag", ReplyAction="http://tempuri.org/IUserManager/AuthenticateGamertagResponse")]
        System.Threading.Tasks.Task<int> AuthenticateGamertagAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateEmail", ReplyAction="http://tempuri.org/IUserManager/AuthenticateEmailResponse")]
        int AuthenticateEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AuthenticateEmail", ReplyAction="http://tempuri.org/IUserManager/AuthenticateEmailResponse")]
        System.Threading.Tasks.Task<int> AuthenticateEmailAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : Spider_Clue.SpiderClueService.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<Spider_Clue.SpiderClueService.IUserManager>, Spider_Clue.SpiderClueService.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUserTransaction(Spider_Clue.SpiderClueService.Gamer gamer) {
            return base.Channel.AddUserTransaction(gamer);
        }
        
        public System.Threading.Tasks.Task<int> AddUserTransactionAsync(Spider_Clue.SpiderClueService.Gamer gamer) {
            return base.Channel.AddUserTransactionAsync(gamer);
        }
        
        public bool IsAccountExisting(string email) {
            return base.Channel.IsAccountExisting(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsAccountExistingAsync(string email) {
            return base.Channel.IsAccountExistingAsync(email);
        }
        
        public bool AuthenticateAccount(string gamertag, string password) {
            return base.Channel.AuthenticateAccount(gamertag, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateAccountAsync(string gamertag, string password) {
            return base.Channel.AuthenticateAccountAsync(gamertag, password);
        }
        
        public string RequestGuessPlayer() {
            return base.Channel.RequestGuessPlayer();
        }
        
        public System.Threading.Tasks.Task<string> RequestGuessPlayerAsync() {
            return base.Channel.RequestGuessPlayerAsync();
        }
        
        public int AuthenticateGamertag(string gamertag) {
            return base.Channel.AuthenticateGamertag(gamertag);
        }
        
        public System.Threading.Tasks.Task<int> AuthenticateGamertagAsync(string gamertag) {
            return base.Channel.AuthenticateGamertagAsync(gamertag);
        }
        
        public int AuthenticateEmail(string email) {
            return base.Channel.AuthenticateEmail(email);
        }
        
        public System.Threading.Tasks.Task<int> AuthenticateEmailAsync(string email) {
            return base.Channel.AuthenticateEmailAsync(email);
        }
    }
}
